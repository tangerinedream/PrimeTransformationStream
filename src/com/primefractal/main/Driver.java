/**
 * 
 */
package com.primefractal.main;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.zip.GZIPInputStream;

import com.primefractal.stream.ITransformationPlugin;
import com.primefractal.stream.TransformationWorker;

/**
 * @author GMan
 *
 */
public class Driver {

	protected ArrayList<ITransformationPlugin> makeTransformationWorkers(PropertiesHelper props, PipedReader readerForFirstPlugin, PipedReader lowerOrderSetForPlugin) {
		// Get the number of transformations or K  
		
		
		// The number of plugins to install = "K-1".  K==1 is already generated by the input stream (e.g. PrimeSeive)
		int nbrPluginsRequired=props.getMaxK() - 1;
		long reqSetSize=props.getReqSetSize();
		
		ArrayList<ITransformationPlugin>  plugins=new ArrayList<ITransformationPlugin>();
		for(int i=0; i < nbrPluginsRequired; i++ ) {
			// we add 2 to i because that is the K value for this worker.  Recall, Set 0 doesn't exist and Set 1 is the input stream to the java program
			ITransformationPlugin currPlugin=new TransformationWorker(i+2, reqSetSize);
			plugins.add(currPlugin);
		}
		
		// Flag the last plugin as being the last in the chain.  Java counts starting at zero, so subtract one
		ITransformationPlugin currPlugin=plugins.get(nbrPluginsRequired-1);
		currPlugin.setThisIsLastPluginInChain(true);
		
		// Now wire them up
		for(int i=0; i < nbrPluginsRequired; i++ ) {
			
			currPlugin=plugins.get(i);
			
			if( i == 0 ) {
				// Special case - no plugin ahead of him to wire him up.  We will do it manually.
				currPlugin.setPrimes(readerForFirstPlugin);
				currPlugin.setLowerOrderSet(lowerOrderSetForPlugin);
				continue;
			}

			if( currPlugin.isThisIsLastPluginInChain() == true ) {
				// Last element in the list - special case
				currPlugin.wireUp(null);
			} else {
				currPlugin.wireUp(plugins.get(i=1));
			}
		}
		
		
		return(plugins);
	}
	
	public Reader makeReaderFromFile(PropertiesHelper props) {
		String filename=SET_1_FILENAME_PREFIX_+props.getReqSetSize()+".gz";
		
		// Convert to Reader
		InputStreamReader isr=null;
		try {
			FileInputStream fis=new FileInputStream(filename);
			// Buffer for performance 
			BufferedInputStream bis=new BufferedInputStream(fis);
			// Gunzip
			GZIPInputStream gis=new GZIPInputStream(bis);
			isr = new InputStreamReader(gis);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return(isr);
	}
	
	public Reader makeReaderFromStdin() {
		// System.in is an InputStream
		BufferedReader stdinReader=new BufferedReader(new InputStreamReader(System.in)); 
		return(stdinReader);
	}
	
	protected PipedReader makePrimesPipeForFirstPlugin(PropertiesHelper props) {
		
		PipedReader primesReader=null;
		try {
			// Create the PipedReaders for the first Plugin.  The rest of the plugins set manufacture using Chain of Responsibility pattern
			primesReader=new PipedReader(ITransformationPlugin.PRIMES_PIPE_BUF_SIZE_);
			// The end of the point that primes will be written so the first plugin can read them
			primesMainEndpointWriter=new PipedWriter(primesReader);
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return(primesReader);
	}
	
	protected PipedReader makeLowerOrderPipeForFirstPlugin(PropertiesHelper props) {
		
		PipedReader lowerOrderReader=null;
		try {
			// Create the PipedReaders for the first Plugin.  The rest of the plugins set manufacture using Chain of Responsibility pattern
			lowerOrderReader=new PipedReader(ITransformationPlugin.HIGH_ORDER_PIPE_BUF_SIZE_);
			// The end of the point that primes will be written so the first plugin can read them
			lowerOrderMainEndpointWriter=new PipedWriter(lowerOrderReader);
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return(lowerOrderReader);
	}
	
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Driver driver=new Driver();
		PropertiesHelper props=PropertiesHelper.getInstance();
		
		// Are we using stdin for K=1 (Set.1.xxx) or a File Override?
		if(props.isUseFileInputStream() == true )
			setK1Reader=driver.makeReaderFromFile(props);
		else
			setK1Reader=driver.makeReaderFromStdin();
		
		// Make Pipes for the first plug (a special case)
		PipedReader primesReaderForFirstPlugin=driver.makePrimesPipeForFirstPlugin(props);
		PipedReader lowerOrderSetReaderForFirstPlugin=driver.makeLowerOrderPipeForFirstPlugin(props);

		// Make and wire up the Workers
		ArrayList<ITransformationPlugin> plugins=driver.makeTransformationWorkers(props, primesReaderForFirstPlugin, lowerOrderSetReaderForFirstPlugin);

		//Launch Threads...
		for( int i=0; i < plugins.size(); i++ ) {
			Thread t=new Thread((Runnable) plugins.get(i));
			t.start();
		}

		// Write stream of Primes to first plugin's Pipe
		try {
			int charRead=setK1Reader.read();
			while( charRead != EOF_ ) {
				primesMainEndpointWriter.write(charRead);
				lowerOrderMainEndpointWriter.write(charRead);
				charRead=setK1Reader.read();
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	protected static PipedWriter	primesMainEndpointWriter=null;
	protected static PipedWriter	lowerOrderMainEndpointWriter=null;
	
	// The stream of primes (e.g. K=1)
	protected static	Reader setK1Reader=null; 

	private static final String SET_1_FILENAME_PREFIX_="Set.1.";
	private final static int		EOF_=-1;
}
